[["index.html", "Sozialwissenschaftliche Datenanalyse mit R Einführung", " Sozialwissenschaftliche Datenanalyse mit R Kenneth Horvath &amp; Guy Schwegler HS 2021 Einführung Das Seminar Sozialwissenschaftliche Datenanalyse mit R bietet eine systematische Einführung in das Statistikpaket R sowie die Benutzeroberfläche RStudio. R ist eine Open Source Software, die sich unter anderem durch Flexibilität sowie durch vielfältige Möglichkeiten der numerischen und grafischen Datenanalyse auszeichnet. Das Seminar führt auf der einen Seite allgemein in den Aufbau des Programms und dessen Funktionsweisen ein. Auf der anderen Seite werden gewisse statistische Verfahren auch in inhaltliche Abstimmung mit der Vorlesung Grundlagen der multivariaten Statistik vermittelt. Anhand der Funktionsweisen und der Verfahren werden dann Techniken des effizienten Datenmanagements, Möglichkeiten zur eigenständigen Programmierung von kleinen Funktionen sowie Formen der grafischen Datenanalyse und Ergebnisdarstellung besprochen. Das vorliegende Dokument ist ein sogenanntes Bookdown (Xie 2020), siehe auch hier, und dient der Ergebnissicherung im Seminarverlauf. Das heisst dass die im Seminar besprochene Themen hiernochmals schriftlich festgehalten, diskutiert und allenfalls mit Literatur ergänzt werden (siehe für allgemeine Literatur etwa Diaz-Bone (2019), Kabacoff (2015) oder Manderscheid (2017)). Das Bookdown wird laufend aktualisiert. Ebenfalls werden in diesem Bookdown die Lösungen für die im Seminar beziehungsweise in den Wochenplänen gestellten Aufgaben präsentiert (Falllösungen). References "],["wocheplan-01.html", "1 Wocheplan 01 1.1 Sozialwissenschaftliche Datenanalyse 1.2 Ziel des Kurses 1.3 R als Programm &amp; RStudio 1.4 Lernziele der ersten Woche 1.5 Aufgaben der ersten Woche 1.6 Ergänzung: Standardabweichung zwischen Grundgesamtheit und Stichprobe", " 1 Wocheplan 01 Vorbereitung von der 01. auf die 02.Einheit. 1.1 Sozialwissenschaftliche Datenanalyse Das Seminar sozialwissenschaftliche Datenanalyse mit R versucht eine Realität des statistischen Arbeitens zu vermitteln und ergänzt so die Vorlesung Grundlagen der multivariaten Statistik gleich in zweierlei Hinsicht: Erstens wird eine Auswahl der gelernten statistischen Verfahren konkret angewendet (und so auch nochmals repetiert). Zweitens zeigt sich neben den eigentlichen Verfahren ein weiterer, impliziter Teil der Statistik: ein Umgang mit Daten, deren Aufbereitung und Verarbeitung sowie die damit einhergehenden Herausforderungen. Hinter dem Seminar steht eine bestimmte Vorstellung der sozialwissenschaftlichen Datenanalyse, die folgende Teile enthält (Wickham and Grolemund 2016): Figure 1.1: Modell Datenanalyse Als erster Schritt müssen die Daten eingelesen bzw. importiert werden. Die importierten Daten gilt es dann aufzubereiten und aufzuräumen. Das bedeutet, dass sie in einer konsistenten Form gespeichert werden sollen (z.Bsp. dass jede Zeile einer Person und jede Spalte einer Variable entspricht). Dieser zweite Schritt ist im Rahmen von Sekundärdaten (wie auch wir sie verwenden werden) oft bereits erfolgt. Ein weiterer Schritt ist es dann, die Daten zu transformieren. Das heisst die Fälle und ihre Ausprägungen werden auf ein bestimmes Interesse eingegrenzt (z.Bsp. auf alle Personen die über ein bestimmtes Einkommen verfügen), neue Variablen werden erstellt (die Funktionen bestehender Variablen sind, etwa Einkommensklassen), und eine Reihe von zusammenfassenden Statistiken werden berechnet (verschiedene univariate Kennwerte). Das Aufbereiten und Transformieren ist ein grosser Teil der statistischen Analyse (es ist ein Kampf mit den Daten, Wickham and Grolemund 2016, Kap.1.1). Ziel dieser Arbeit ist es, die Daten in eine passende Form zu bringen, um optimal mit ihnen arbeiten zu können. Wenn die Daten (voerst) in einer optimalen Form vorliegen gibt es zwei Hauptmotoren der Wissensgenerierung (Wickham and Grolemund 2016, Kap.1.1): Visualisierung und Modellierung. Mit Visualisierungen lässt sich schnell eine Übersicht gewinnen (z.Bsp. könnte es überhaupt einen Zusammenhang zwischen zwei Variablen geben?). Modellierungen wiederum ergänzen diese ersten Einsichten, indem präzise Antworten auf Fragen möglich sind (wie gross ist der Zusammenhang genau?). Das Transformieren, Visualisieren und Modellieren der Daten ist dabei keineswegs ein linearer Prozess, sondern es ergeben sich in ihm immer wieder Wechselwirkungen, Rückbezüge und dadurch neue Wege, um an die Daten heranzutreten. Der letzte Schritt der Datenanalyse ist die Kommunikation. Es gilt also sowohl das Vorgehen (zumindest teilweise) als inbesondere auch die Ergebnisse der Analyse anderen mitzuteilen. Diese Prozesse der Datenanalyse finden alle in einem bestimmen Rahmen statt (vgl. auch Sauer 2019, 3). Dies ist auf der einen Seite die Idees des Programmierens im Vorgehen selber (vgl. Wickham and Grolemund 2016, Kap.1.1). Auf der anderen Seite bilden aber die Sozialwissenschaften selber auch einen Rahmen, anhand dessen etwa Datenstrukturen (z.Bsp. dass eine Person ein Fall und damit eine Zeile ist) oder angemessene Ziele der Analyse (ab wann ist ein Zusammenhang etwa gross?) vorgegeben werden. 1.2 Ziel des Kurses Das Seminar verfolgt zwei miteinander verzahnte, übergeordnete Lernziele. Einerseits sollen die Studierenden sich Grundkenntnisse der statistischen Datenanalyse mit R aneignen. Andererseits werden ausgewählte Inhalte der Vorlesung praktisch angewandt und damit auch veranschaulicht.1 Konkret sollen die Studierenden am Ende des Semesters einen ersten Einblick in Abläufe und Anforderungen softwaregestützter Datenanalyse haben, typische Herausforderungen statistischen Arbeitens eigenständig bewältigen können, die allgemeine Funktionsweise und die Struktur von R verstehen, die Umsetzung ausgewählter multivariater Verfahren in R beherrschen, dabei auch grafische Verfahren als zentrale Bausteine aktueller Datenanalyse einsetzen können sowie die Grundlage dafür erworben haben, flexibel eigene Analysestrategien in R umzusetzen. 1.3 R als Programm &amp; RStudio R als Programmiersprache wurde von Beginn an für die Statistik beziehungsweise für die Statistiklehre entwickelt. Die Anfänge des Programms fanden in den 1990er Jahre an der Universität Auckland in Neuseeland statt, wo R von Ross Ihaka und Robert Gentleman entwickelt wurde (Manderscheid 2017, 1). Der Buchstabe R als Name geht sowohl auf eine ältere Grundlage zurück  die Programmiersprache S  als auch auf die Vornamen der beiden Entwickler (ebd., vgl. auch Sauer 2019, 13f). Das R-Projekt wurde in der Zusammenareit mit weiteren Wissenschaftler_Innen voran getrieben und bald auch unter der General Public Licence (GNU) veröffentlicht (Manderscheid 2017, 1). R ist daher frei zugänglich, kostenlos und darf von allen verändert werden. Es ist insbesondere auch diese Open Source Idee, die R zu seiner Verbreitung half  und die sicherstellt, dass die neusten Entwicklungen in und mit der Software stattfinden. R als Programm ist in Paketen organisiert und präsentiert sich als Statistikumgebung (Manderscheid 2017, 1). Ausgehend von der Basisversion bzw. des Basispaketes kann R beliebig erweitert werden. Unter https://cran.r-project.org/ findet sich eine beständig wachsende und umfangreiche Sammlung von Paketen, die sowohl Lösungen für allgemeine Verfahren anbieten (etwa Pakete für die multiple Korrespondenzanalyse, siehe soc.ca) als auch für spezifische Probleme (etwa für Atomic Force Microscope Image Analysis beim Paket AFM). Diese Pakete können installiert werden und es gilt sie dann jeweils noch zu laden, bevor sie verwendet werden können. Nach dem Beenden des Programms werden die verwendeten Pakete wieder versorgt und es gilt sie beim nächsten Mal erneut zu laden (die Pakete beleiben aber installiert). Letzterer Vorgang stellt sicher, dass R schlank bleibt, d.h. nur immer die benötigen Dinge auch ausgeführt werden. install.packages(&quot;soc.ca&quot;) #...installiert das Paket library(soc.ca) #...lädt das Paket Neben dieser Open Source Idee und der daraus folgenden, beständigen Aktualisierung und Erweiterungen des Programms zeichnet R sich weiter durch dessen Stärke im Bereich der Visualisierung aus. Es bieten sich unbegrenzte Möglichkeiten für Grafiken und Diagramme, sowohl bereits in der Basisversion als insbesondere auch mit spezifischen Paketen (siehe Chang et al. 2020). Neben der Basisversion von R und R als eigentlicher Programmiersprache gibt es grafische Benutzeroberflächen (GUIs), um mit der Programmiersprache umzugehen. Im Zentrum unseres Seminars steht RStudio, die am weitesten verbreitete grafische Benutzeroberfläche von R. Diese Oberfläche bietet einige praktische Zusatzfunktionen und erleichtert so das Arbeiten mit R durch Autovervollständigkeitsfunktionen, automatische Einrückungen, Syntaxhervorhebung, integrierte Hilfsfunktion, Informationen zu Objekten im Workspace, menügestützten Oberflächen und Daten-Viewer (Manderscheid 2017, 18). Die eigentliche Arbeit verrichtet aber weiterhin R selber, und R wird automatisch gestartet wird, wenn Sie RStudio starten (Sauer 2019, 21). Man kann diese Arbeitsteilung mit einem Auto vergleichen: R ist der Motor des Autos, während RStudio das Amaturenbrett ist, vor dem Sie sitzen und das Auto lenken. 1.4 Lernziele der ersten Woche Die erste Seminarwoche dient dazu, die technischen Voraussetzungen für die gemeinsame Arbeit im Seminar zu prüfen und mit der geplanten Arbeitsweise vertraut zu werden. Das Seminar zielt nicht nur auf einen Frontalunterricht ab, sondern ist als eine Art flipped classroom konzipiert. Sie bekommen also von Woche zu Woche konkrete Arbeitsaufträge (die Falllösungen). Diese sollen Sie eigenständig bewältigen und alle Probleme und Unklarheiten notieren, die sich im Arbeitsprozess ergeben. Die gemeinsamen Sitzungen dienen dann dazu, Lösungswege zu den Aufgaben zu präsentieren, offene Fragen zu klären, Konzepte vertiefend zu erläutern und die nächsten Schritte vorzubereiten. Für jede Woche werden Lernziele und Arbeitsaufträge definiert. Für die erste Seminarwoche lassen sich als Lernziele festhalten: Sie wissen, wie Sie die aktuellen Versionen von R und RStudio auf Ihrem Computer installieren Sie wissen, wie man R-Pakete installiert und in R lädt Sie können eine Funktion aufrufen Sie haben einen soliden ersten Eindruck, wie man mit R kommuniziert und einfache Operationen durchführt Sie haben eine erste Orientierung zu Unterstützungsangeboten, die man online findet (auch wenn diese teilweise noch überfordernd wirken) 1.5 Aufgaben der ersten Woche Installieren Sie die aktuellen Versionen von R und RStudio auf Ihrem Endgerät! Sie sollten sich Notizen machen, wenn es Probleme gibt  und für das nächste Mal gleich festhalten, wie Sie diese gelöst haben. Da die Details der Installation vom Betriebssystem und den Spezifikationen des Endgeräts abhängen, ist es normal, dass dieser Prozess manchmal erst auf den zweiten Versuch funktioniert. Mittels der Funktion version (ACHTUNG: ohne Klammern) lässt sich die Version von R abrufen. Ob dies der aktuellsten Version von R entspricht lässt sich auf der R Projektseite überprüfen. RStudio lässt sich über die Menüsteuerung updaten: Help &gt; Check for Updates. Wichtig: RStudio als grafische Benutzeroberfläche ist nicht dasselbe wie R. Ein Update von RStudio ist also nicht nicht gleich ein Update von R, sondern letzteres muss manuell erfolgen. Das Paket installr und dessen Funktion updateR() ermöglicht auf Windows dass sowohl R als auch die installierten Pakete geupdated werden. Ebenfalls bietet RStudio über die Menüsteuerung eine Möglichkeit, die Pakete zu installieren (Tools&gt;Check for Packages Updates). Zwei Unklarheiten, die aufgetaucht sind: Es sind mehrere Versionen von R auf meinen Computer installiert Ist das ein Problem? Nein, denn RStudio arbeitet automatisch mit der neusten Version. Aber es können auch ältere Versionen verwendet beziehungsweise zwischen den Versionen gewählt werden (siehe Tools &gt; Global Options &gt; General &gt; R Version). Was passiert mit meinen installierten Paketen? Die installierten Pakete bleiben grundsätzlich erhalten. Mittels der Funktion .libPaths() sehen Sie auch, wo diese installiert sind.2 Weiter ist der Umgang mit Paketen kein wirkliches Problem. Da Sie jeweils in Ihrem Code auch spezifizieren, welche Pakete Sie installieren und laden, würde Ihnen ein Fehler sofort auffallen. Dies kann zum Beispiel wiefolgt gemacht werden als Kode in einem Markdown: #install.packages(&quot;swirl&quot;) library(swirl) swirl() #install.packages(&quot;soc.ca&quot;) library(soc.ca) soc.mca(Datenset) Der install.packages()-Befehl ergibt eine Fehlermeldung beim sogenannten knitten, wenn dieser nicht als Kommentar formatiert ist. Der Fehler verweist darauf, dass R kein Repository via Markdown automatisch aufrufen kann. Zwei Möglichkeiten von Josias Bruderer, dies trotzdem zu umgehen (und den install.packages()-Befehl nicht einfach als Kommentar zu setzen): Eine Möglichkeit den Fehlerbefehl auszuschalten ist es, ein Repository anzugeben: install.packages(&quot;swirl&quot;, repos = &quot;https://cran.rstudio.com/&quot;) Eine andere und erweiterte Möglichkeit ist einen Befehl zu ergänzen, der jeweils nur dann ein Paket installiert, wenn dieses benötigt und noch nicht installiert ist: if (!require(&quot;swirl&quot;)) install.packages(&quot;swirl&quot;)   Installieren Sie das Paket swirl und laden Sie es. swirl ist eine in R implementierte interaktive Einführung in die Grundlagen von R! Hier ein Tipp von Julien Lattmann: Sollte dies nach dem Update von R und RStudio womöglich nicht funktioniert haben, dann lohnt es sich nochmals alles zu schliessen, ein paar Moment zu warten und dann nochmals neu zu probieren.   Rufen Sie die Funktion swirl() auf und spielen Sie ein wenig damit. Rufen Sie sich in Erinnerung, was Sie aus dem letzten Semester noch über die Arbeit mit R wissen! Notieren Sie sich, was Ihnen Sie noch kennen, was Ihnen neu vorkommt, und so weiter. Grundsätzlich ging es in dieser Teilaufgabe darum, einige Aspekte von R (erneut) kennenzulernen. Zwei zusammenhängende Dinge sollen hervorgehoben werden: Erwähnt wurde, dass das Programmieren verlangt, sehr genau zu schreiben und kleinste Ungenauigkeiten zu Fehlern führen (etwa ein fehlendes \"). Hier bietet RStudio eine Hilfe an, in dem der Kode farbig gekennzeichnet wird. Diese Hilfe war jedoch um Umgang mit swirl noch nicht ersichtlich, da im Paket direkt in der R Konsole gearbeitet wird. Dies führt zum zweiten Aspekt: Dieser Fokus auf die Konsole beim Paket swirl() ist eher die Ausnahm - und der Hauptteil des Kondierens erfolgt eigentlich immer im einem Skript beziehungsweise in einem Markdown-Dokument (siehe WP02).   Verwenden Sie ein wenig Zeit darauf, online nach R Tutorials, Foren, etc. zu suchen. Halten Sie die URLs von Seiten und Ressourcen fest, die Ihnen hilfreich und/oder wichtig vorkommen (aber unter Umständen noch etwas schwer zu durchschauen) ! Einige Hilfseiten aus Ihren Falllösungen: r-statistics.co: Einführung zu spezifischen Verfahren R Tutorial: viele kurze einführende Beiträge zu Aspekten von R. R Statistik Tutorial: Deutsche Beiträg zu einzelnen Verfahren. RStudio Community: Forum für RStudio R lernen: einige einführende Beiträge auf Deutsch R Forum: deutschsprachiges Forum zu R Einführung in R: ein weiteres, deutsches Bookdown als Einführung in R The R Graph Gallery: für fortgeschrittene Grafiken, insbesondere mit ggplot2 stack overflow: jede Menge Hilfe für alles um R (und Programmieren allgemein) github: eine andere Plattform  aber wiederum: jede Menge Hilfe für alles um R (und Programmieren allgemein) datacamp: kostenpflichte Tutorials für R 1.6 Ergänzung: Standardabweichung zwischen Grundgesamtheit und Stichprobe In der Einheit haben wir gesehen, dass sich eine von R berechnet Standardabweichung leicht von einer selbst berechneten Variante unterscheidet: y &lt;- c(2, 3, 4, 7, 8, 9) sd(y) ## [1] 2.880972 sqrt( sum((y - mean(y))^2) / (length(y)) ) ## [1] 2.629956 In der Hilfeseite der Funktion finden wir den Hinweis darauf, dass mit sd() ähnlich wie mit var() der sogennante unbiased estimator berechnet wird, der von n - 1 ausgeht. help(sd) Like var this uses denominator n - 1. [] The denominator n - 1 is used which gives an unbiased estimator of the (co)variance for i.i.d. observations. Die Standardabweichung wird berechnet, als würde man den Schätzwert für einer Grundgesamtheit aus einer Stichprobe berechnet (i.i.d = Independent and identically distributed random variables). Dies entspricht einer sogenannten Punkteschätzung (Diaz-Bone 2019, 155f): Bei der Punktschätzung errechnet man aus der Stichprobe einen Stichprobenkennwert und schätzt damit die entsprechende Maßzahl in der Grundgesamtheit. Der Stichprobenkennwert, mit dem die Schätzung erfolgt, heißt auch Schätzer. [] Die Standardabweichung eines metrischen Merkmals in der Stichprobe s ist dagegen keine erwartungstreue Schätzung für die Standardabweichung des metrischen Merkmals in der Grundgesamtheit. Aus einer Stichprobe kannman aber mit folgender Formel erwartungstreu schätzen: \\({\\sqrt{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2}}\\) Dabei wird n - 1 verwendet, da bei kleineren Stichprobenumfängen die Standardabweichung überschätzt wird. Bei grösseren Stichprobenumfängen wird dies dann immer weniger wichtig: z &lt;- rnorm(1000) #eine standardnormalverteilte Varialbe mit n = 50 sd(z) ## [1] 0.973144 sqrt( sum((z - mean(z))^2) / (length(z)) ) ## [1] 0.9726573 References "],["wochenplan-02.html", "2 Wochenplan 02 2.1 Lernziele 2.2 Aufgaben", " 2 Wochenplan 02 Vorbereitung von der 02. auf die 03.Einheit. 2.1 Lernziele In der zweiten Seminarwoche geht es darum, die Grundlagen von R und RStudio zu repetieren und zu erweitern.3 Für den weiteren Verlauf wollen wir R als Sprache auffassen  sowohl als Programmiersprache als auch als Sprache in einem metaphorischen Sinn. Wir wollen also ein komplexes System zur Kommunikation kennenlernen. Wie bei einer anderen Sprache gibt es auch hier Zeichen mit Bedeutungen (ähnliche wie Nomen, Verben, . . . ) und Regeln zur Verknüpfung dieser Zeichen (ähnlich wie eine Grammatik). Diese Grundlagen gilt es alle erstmal kennenzulernen und zu verstehen. Am Anfang wird vieles schwer fallen, mit der Zeit gewinnt man aber Sicherheit. Der zentrale Punkt in dieser Vorstellung von R als Sprache ist dabei folgender: Wir lernen eine Sprache dadurch, dass wir sie immer wieder anwenden, Probleme lösen und vor allem auch Fehler machen. R als Software und als Programmiersprache hat eine steile Lernkurve und zu Beginn werden viele Probleme auftauchen. Im Umgang mit den Problemen soll allerdings auch eine eigene Arbeitsweise mit dem Programm erlernt werden (Fehlermeldungen lesen, Lösungsstrategien im Codieren erlernen, selber Hilfe suchen, . . . ). Für die beständige Erweiterung der Grundlagen und das Erlernen der Sprache R besteht eine Herausforderung darin, den Weg zwischen scheinbarer Trivialität und überfordernder Komplexität zu finden: Es gilt die kleinen Schritte ernstzunehmen, sonst werden die grossen Schritte sehr schnell mühsam. Für die zweite Seminarwoche lassen sich folgende Seminarziele festhalten: Sie können die verschiedenen Funktionsweisen der vier Fenster in RStudio erläutern. Sie verstehen den Unterschied zwischen der Arbeit in der Konsole und im Skript. Sie verstehen, wie und wozu man im Skript kommentiert. Sie haben R-Markdown als erweitertes Skript und Arbeitsinstrument kennengelernt. Sie wissen, was ein Arbeitsverzeichnis in R ist und wozu es gut ist. Sie verstehen das erste Grundelement der Sprache R: Funktionen Sie wissen, wie Funktionen aufgebaut sind Sie wissen, wie Sie sich Hilfe zu Funktionen holen; Sie wissen, was Argumente in einer Funktion bewirken. Sie verstehen das zweite Grundelement der Sprache R: Objekte Sie verstehen, was es bedeutet, dass in R alles ein Objekt ist; Sie wissen, wie man sich die jeweils aktuell verfügbare Objekte anzeigen lässt; Sie haben das Zusammenspiel von Funktionen und Objekte kennengelernt; Sie kennen bereits drei verschiedenen Arten von Objekten. 2.2 Aufgaben Fassen Sie noch einmal für sich und in eigenen Worten die Funktionen der vier Fenster von RStudio zusammen. Oben links findet sich in R-Studio das Skript-Fenster, in dem Befehle eingegeben und kommentiert werden können. Ausgeführt werden diese Befehle erst, wenn Sie Ctrl und Enter drücken (bzw. Cmd &amp; Enter). Diese Eingabe von Kodezeilen wird ergänzt durch die direkte Eingabe in der Konsole. In diesem Fenster läuft das eigentliche Programm R (es ist also dieselbe Ansicht wie wenn Sie R ohne grafische Benutzeroberfläche starten würden).4 Im Gegensatz zum Skript können hier Befehle nur immer einzeln eingegeben und sie müssen dann direkt ausgeführt werden. Dies ermöglicht ein schneller ausprobieren, aber eben kein wirklich speichern, beständiges überarbeiten, kommentieren und eine klare Dokumentation des Ablaufs, wie dies im Skript erfolgen kann. Die beiden Fenster zur Eingabe von Kode werden vom Environment-Fenster ergänzt. Hier finden sich die abgespeicherten Objekte sowie in den weiteren Reitern die bisher ausgeführten Befehle (History), aber auch eine erweitere Netzwerk- bzw. Serverumgebung (Connections, Build, ), falls Sie z.Bsp. mit weiteren Personen an einem Projekt arbeiten. Im vierten Fenster werden Grafiken, Hilfeseiten, die Vorschau für geknittete Dokumente und auch die Ordnerstruktur angezeigt. Sie finden diverse Einstellungsoptionen zu den vier Fenster und deren Anordnung unter Tools &gt; Gobal Options. Dort können Sie etwa unter dem Reiter General die Option zum Save Workspace to RData on exit zu Never wechseln. Dies führt dazu, dass Ihre Environment beim Verlassen von R immer gelöscht wird. Dies ist nicht etwa ein Nachteil, sondern eine Technik die Sie dazu veranlasst, alle benötigen Schritte in Ihrem Kode unterzubringen. Weiter könne Sie unter dem Reiter Spelling auch noch die Rechtschreibefunktion deaktiveren, da das Feature noch nicht wirklich für die deutsche Rechtschreibung zu funktionieren scheint (bzw. die Ergänzung von neuen Wörterbüchern nicht fehlerfrei abläuft). Die Ordnerstruktur im Reiter Files des vierten Fensters hängt mit Ihrem aktuellen Arbeitsverzeichnis zusammen. Ein Arbeitsverzeichnis ist der Ort, auf den R immer als Erstes zugreift und wo Dinge automatisch abgelegt werden. Dieses können über die Menüsteuerung Session &gt; Set Working Directory &gt; Choose Directory oder über den Befehl setwd() definieren (erstere Variante ist etwas einfacher). Der getwd() Befehl wiederum gibt das aktuell festgelegte Verzeichnis aus. Speichern Sie jeweils Ihr aktuelles Arbeitsverzeichnis als Teil des Markdowns, z.Bsp. so: setwd(&quot;C:/Users/SchweglG/R_Daten/HS20/E3&quot;) #Dies dient in einem Skript oder einem Markdown als Erinnerung, ... #...wo Ihr Arbeitsverzeichnis liegt (und damit wo Sie Ihre Daten wiederfinden)   Was ist der Vorteil der Arbeit im Skript gegenüber dem Schreiben von Code direkt in der Konsole? Und was könnten dann die Vorteile davon sein, mit R Markdown zu arbeiten? Und wann könnten Sie trotzdem besser mit einem klassischen Skript arbeiten? Schauen Sie sich auch die Formatierungsmöglichkeiten für Fliesstext in den Cheatsheets zu R Markdown an (siehe hier)! Vorteile der Arbeit im Skript: Da Kodezeilen nicht sofort ausgeführt werden müssen ermöglicht das Skript die Strukturierung und Abspeicherung von Befehlen (Delia Bazzigher). Ein weiterer Vorteil kann es sein, komplexe Funktion, die man z.B. in einem RMarkdown braucht, in einem Skript zu hinterlegen, um im RMarkdown nicht zu viel Code einzubauen, damit sich die Leser:innen nicht darum kümmern müssen (Fabio Keller). Vorteile der Arbeit in RMarkdown: RMarkdown bietet die Möglichkeit, Kodezeilen (die Chunk) auf vielfältige Weise mit Text zu ergänzen und diesen Text zu formatieren: bspw. Bold, Italics, Aufzählungszeichen, Übertitel in unterschiedlichen Grössen, etc. []. Auch zwingt es den User, genau zu arbeiten, da [ein RMarkdown] geschlossen funktioniert (bspw. ein Objekt kann sich im Environment befinden, aber nicht im Universum des Markdowns) (Valentina Meyer). Vorteile der Konsole: In der Konsole kann über die beiden Pfeiltasten runter und rauf durch bisher ausgeführte Befehle gescrollt werden. So können Sie die Rechnung erneut aufrufen und dem Objekt x zuweisen. Ebenfalls können in der Konsole Dinge ausprobiert oder Hilfefunktionen aufgerufen werden.   Öffnen Sie eine neue R Markdown Datei. Versuchen Sie Ihre bisherigen Notizen zu den Aufgaben und Ihren Code in dieser Datei unterzubringen (falls Sie dies nicht schon gemacht haben). Arbeiten Sie für die folgenden Aufgaben mit dieser Datei weiter.   Versuchen Sie allgemein zu beschreiben, was Funktionen und was Objekte sind. Fügen Sie eine kurze Erläuterung in Ihr Markdown-Dokument zur Frage ein, was im folgenden Code jeweils Funktionen und was Objekte (und wenn letzteres, welche Art von Objekt) sind: sqrt(x) Funktion(en): sqrt() Objekt(e): x - eine undefiniertes Objekt help(&quot;sqrt&quot;) Funktion(en): help() Objekt(e): sqrt() - ein Funktion als Objekt, hier im Charakterformat ausgeschrieben Warum erfolgt jetzt die Schreibweise von sqrt in der Art und Weise? Gehen wir dazu kurz in die Hilfefunktion selber: ?help Funktion(en): ? als andere Schreibweise von help() Objekt(e): help() - ein Funktion als Objekt, hier aber nicht im Charakterformat ausformuliert. Dort finden wir die Spezifizierung bei Topic: usually, a name or character string specifying the topic for which help is sought. A character string (enclosed in explicit single or double quotes) is always taken as naming a topic. Was heisst jetzt ein Charakter-String? Es gibt eben nicht nur numerische Daten x1 &lt;- 5 sondern auch textliche oder Charakterdaten x2 &lt;- &quot;fünf&quot; class(x1) ## [1] &quot;numeric&quot; typeof(x1) ## [1] &quot;double&quot; class(x2) ## [1] &quot;character&quot; typeof(x2) ## [1] &quot;character&quot; Warum zeigt R uns zwei verschiedene Merkmale bei x1 an? R speichert Zahlen auf eine bestimmte Art und Weise ab, nämlich normalerweise als sogennante doubles oder als Zahlen mit Nachkommastellen. Man könnte die 5 auch als Integer (also als Zahl ohne Kommata) abspeichern: x3 &lt;- 5L class(x3) ## [1] &quot;integer&quot; typeof(x3) ## [1] &quot;integer&quot; Das brauchen wir allerdings kaum im alltäglichen Umgang mit R. y &lt;- c(1, 3, 4, 5, 6, 7, NA) #und z &lt;- c(7, 8, 10, 11) Funktion(en): &lt;-, c() Objekt(e): y, z - ein Vektor; 1, 3, 4, 5, 6, 7, 7, 8, 10, 11 - jeweils numerische Objekte; NA - ein fehlender Wert Berechnen des arithmetischen Mittels: (7+ 8+ 10+ 11) / 4 ## [1] 9 sum(z) / length(z) ## [1] 9 mean(z) ## [1] 9 #Was passiert hier? mean(y) ## [1] NA mean(y, na.rm = T) ## [1] 4.333333 Hier haben wir wiederum ein Argument einer Funktion spezifiziert, um die fehlenden Werte auszuklammern. Wichtig: NA ist jetzt nicht dasselbe wie ein Charakter-Datum NA: y1 &lt;- c(1, 3, 4, 5, 6, 7, NA) y2 &lt;- c(1, 3, 4, 5, 6, 7, &quot;NA&quot;) mean(y1, na.rm = TRUE) ## [1] 4.333333 mean(y2, na.rm = TRUE) ## Warning in mean.default(y2, na.rm = TRUE): Argument ist weder numerisch noch ## boolesch: gebe NA zurück ## [1] NA und was ist jetzt mit dem Vektor y1 passiert? Wir sehen, dass Vektoren nur ein Datenformat enthalten können. Ansonsten müssten wir den Vektor als Liste speichern. Listen sind daher ein weiterer Objekttyp (mit dem wir aber nur selten arbeiten werden). is.logical(TRUE) Funktion(en): is.logical() Objekt(e): TRUE - ein logisches Datenformat Was ist TRUE? typeof(TRUE) ## [1] &quot;logical&quot; class(TRUE) ## [1] &quot;logical&quot; TRUE und FALSE Dies sind logische Daten  also Daten die angeben ob etwas wahr oder falsch ist. Wir können auch daraus einen Vektor machen: lv &lt;- c(TRUE, TRUE, FALSE, FALSE, TRUE) Und was passiert wohl hierbei? TRUE + FALSE ## [1] 1 Es sind also einfach auch Werte: 1 oder 0. mean(y1, na.rm = 1) ## [1] 4.333333 Zusammenfassung Wir haben jetzt bereits drei verschiedene Datenarten kennengelernt: numerische Daten Charakterdaten logische Daten. Weiter haben wir bereits drei verschiedene Objekttypen kennengelernt: einzelne Werte Vektoren (als eine Reihe von Werten derselben Datenart) Listen (also Reihe von Werten derselben Datenart) Diese drei Objekttypen werden in der 5. Aufgabe ergänzt von den sogenannten Matrizen.   Sehen Sie sich die Hilfeseite der Funktion matrix() an. Wozu dient diese Funktion? Welche Argumente akzeptiert / benötigt sie und wozu dienen diese? Illustrieren Sie die Funktionsweise anhand von einem Beispiel. Die Funktion matrix() erlaubt es uns ein zweidimensionales Objekt aus einem Set von Werten (einem Vektoren) zu erstellen: Ein Beispiel von Vanesse Leutener: Beispiel: Bei einer kleinen Umfrage wurden 6 Befragte nach Geschlecht und der Höhe des monatlichen Einkommens befragt. Geschlecht 1 = weiblich 2 = männlich 3 = divers Monatliches Einkommen 1 = weniger als 800 CHF 2 = ab 800-1500 CHF 3 = ab 1500-3000 CHF 4 = ab 3000-6000 CHF 5 = mehr als 6000 CHF Geschlecht &lt;- c(2, 3, 1, 1, 1, 2) Einkommen &lt;- c(3, 5, 4, 1, 5, 5) #so? matrix(Geschlecht, Einkommen) ## [,1] [,2] ## [1,] 2 1 ## [2,] 3 1 ## [3,] 1 2 #so? matrix(c(Geschlecht, Einkommen)) ## [,1] ## [1,] 2 ## [2,] 3 ## [3,] 1 ## [4,] 1 ## [5,] 1 ## [6,] 2 ## [7,] 3 ## [8,] 5 ## [9,] 4 ## [10,] 1 ## [11,] 5 ## [12,] 5 #so sollte das passen: matrix(c(Geschlecht, Einkommen), nrow = 6, ncol = 2) ## [,1] [,2] ## [1,] 2 3 ## [2,] 3 5 ## [3,] 1 4 ## [4,] 1 1 ## [5,] 1 5 ## [6,] 2 5 #Warum stimmt das nicht? matrix(c(Geschlecht, Einkommen), nrow = 6, ncol = 2, byrow = T) ## [,1] [,2] ## [1,] 2 3 ## [2,] 1 1 ## [3,] 1 2 ## [4,] 3 5 ## [5,] 4 1 ## [6,] 5 5 Bei der Anordnung von Zeilen und Spalten wollen wir jeweils Fälle/Personen als Zeilen und Variablen als Spalten darstellen. Und wie könnte wir diese Matrix beschriften? LV_G &lt;- matrix(c(Geschlecht, Einkommen), nrow = 6, ncol = 2) colnames(LV_G) &lt;- c(&quot;Geschlecht&quot;, &quot;Einkommen (Kat.)&quot;) rownames(LV_G) &lt;- c(&quot;F1&quot;, &quot;F2&quot;, &quot;F3&quot;, &quot;F4&quot;, &quot;F5&quot;, &quot;F6&quot;) LV_G ## Geschlecht Einkommen (Kat.) ## F1 2 3 ## F2 3 5 ## F3 1 4 ## F4 1 1 ## F5 1 5 ## F6 2 5 Ein Beispiel von Delia Bazzigher: Eine Studie untersucht die mediale Präsenz der aktuellen Geschehnisse in Afghanistan in der deutschsprachigen Schweiz im September. Dazu werden z.B. die Tageszeitungen untersucht. Es wird eine Häufigkeitszählung in den Zeitungen Tages-Anzeiger, NZZ, Luzerner Zeitung und Blick durchgeführt. Gezählt werden die Anzahl Artikel sowie deren jeweilige Position, d.h. neutral/sachlich, negati/verurteilend oder positiv/unterstützend (die Codierung dieser Kategorien wird hier nicht erläutert). mTageszeitungen &lt;- matrix(c(7,3,0, 12,7,0, 5,3,0, 8,2,3), nrow = 3, ncol = 4, byrow = FALSE, dimnames = list(c(&quot;negativ&quot;, &quot;neutral&quot;, &quot;positiv&quot;), c(&quot;Tages-Anzeiger&quot;, &quot;NZZ&quot;, &quot;Luzerner Zeitung&quot;, &quot;Blick&quot;))) mTageszeitungen ## Tages-Anzeiger NZZ Luzerner Zeitung Blick ## negativ 7 12 5 8 ## neutral 3 7 3 2 ## positiv 0 0 0 3 Was zeigt sich hier für ein Datenformat? Das ist eigentlich bereits abstrahiert! Wir könnten diese Kombination und das erstellen einer Matrix auch mit anderen Funktionen erreichen: LV_G1 &lt;- cbind(Geschlecht, Einkommen) LV_G2 &lt;- rbind(Geschlecht, Einkommen) LV_G1 ## Geschlecht Einkommen ## [1,] 2 3 ## [2,] 3 5 ## [3,] 1 4 ## [4,] 1 1 ## [5,] 1 5 ## [6,] 2 5 LV_G2 ## [,1] [,2] [,3] [,4] [,5] [,6] ## Geschlecht 2 3 1 1 1 2 ## Einkommen 3 5 4 1 5 5 typeof(LV_G1) ## [1] &quot;double&quot; class(LV_G1) ## [1] &quot;matrix&quot; &quot;array&quot; Was ist noch ein spezifische Eigenschaft einer Matrix? Geschlecht_c &lt;- c(&quot;m&quot;, &quot;d&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;m&quot;) LV_G3 &lt;- cbind(Geschlecht_c, Einkommen) LV_G3 ## Geschlecht_c Einkommen ## [1,] &quot;m&quot; &quot;3&quot; ## [2,] &quot;d&quot; &quot;5&quot; ## [3,] &quot;f&quot; &quot;4&quot; ## [4,] &quot;f&quot; &quot;1&quot; ## [5,] &quot;f&quot; &quot;5&quot; ## [6,] &quot;m&quot; &quot;5&quot; typeof(LV_G3) ## [1] &quot;character&quot; class(LV_G3) ## [1] &quot;matrix&quot; &quot;array&quot; Matrizen können nur ein Datenformat speichern - und wandeln daher verschiedene Datenarten in das Niedrigste um. Deshalb arbeiten wir eher mit dem Datenformat bzw. Objekttyp des sogennanten data.frames (oder in ggplot dann tybbles). Dieser Objekttyp ermöglicht ein Speichern von verschiedenen Datenarten in einem zweidimensionalen Format: LV_G4 &lt;- data.frame(Geschlecht_c) LV_G4 &lt;- cbind(LV_G4, Einkommen) LV_G4 ## Geschlecht_c Einkommen ## 1 m 3 ## 2 d 5 ## 3 f 4 ## 4 f 1 ## 5 f 5 ## 6 m 5 typeof(LV_G4) ## [1] &quot;list&quot; class(LV_G4) ## [1] &quot;data.frame&quot; Falls Sie noch Probleme bei der Installation von R bzw. RStudio oder sonstige technische Schwierigkeiten haben, können Sie sich gerne weiterhin per E-Mail melden! Neuere Versionen von RStudio bieten im Fenster der Konsole auch die Möglichkeit, sogenannte Jobs auszuführen (ein Tpp von Josias Bruderer), siehe [hier]:(https://www.youtube.com/watch?v=EBlk1kRbKeU). "],["wochenplan-03.html", "3 Wochenplan 03 3.1 Lernziele 3.2 Aufgaben 3.3 Ergänzung: Seitenumbruch im RMarkdown", " 3 Wochenplan 03 Vorbereitung von der 03. auf die 04.Einheit. 3.1 Lernziele In der dritten Seminarwoche vertiefen wir Elemente der Programmiersprache R, die Sie bereits kennengelernt haben, und betten sie in neue Zusammenhänge ein. Vertieft wird nochmals der Umgang mit verschiedenen Datenarten und Objekttypen: Zahlen, Text und logische Werte sowie einzelne Werte, Vektoren und Matrizen. Neu wollen wir einige Möglichkeiten kennenlernen, über bestimmte Funktionen systematisch Vektoren zu definieren. Diese Grundlagen wollen wir dann nutzen, um erste statistische Inhalte bzw. Methoden einführen, nämlich die bivariaten Zusammenhänge von metrischen Variablen (Korrelation). Zusammenfassend lassen sich damit folgende Seminarziele festhalten: Sie können die drei bisher kennengelernten Objekttypen (einzelne Zahl, Vektor, und Matrix) kombinieren. Sie kennen die drei verschiedenen Datenarten von R: Sie verstehen die Rolle von numerischen Daten, Sie verstehen die Rolle von textförmigen Daten Sie verstehen die Rolle von logischen Daten. Sie können Vektoren mittels der Funktionen   seq()  sowie rep() definieren  und diese auf alle drei Arten von Daten anwenden. Sie verstehen, was eine Korrelation von zwei Variablen bedeutet und können bivariate Zusammenhänge in R berechnen und interpretieren. 3.2 Aufgaben Erstellen Sie vier verschiedene Vektoren mit je einer Länge von vier und verbinden Sie diese zu einer 4x4-Matrix. Die Funktion apply() erlaubt Ihnen, eine Funktionen wie z.B. mean() oder var() auf diese Matrix anzuwenden. Nur wie genau? Sehen Sie sich die Hilfe zu apply() an, probieren Sie die Funktion aus und versuchen Sie zu verstehen, wie sie genau funktioniert. Erläutern Sie apply() dann in eigenen Worten und mit Hilfe der von Ihnen erzeugten 4x4-Matrix! Zuerst können vier Vektoren erstellt werden: m1 &lt;- c(2,4,7,9) m2 &lt;- c(8,9,5,2) m3 &lt;- c(3,5,5,5) m4 &lt;- c(9,8,7,6) Nachdem die vier Vektoren erstellt wurden lassen sie sich über die rbind() und cbind() Funktionen auf zwei verschiedene Weisen zu einer Matrix verbinden, entweder zeilen- oder spaltenweise (siehe die Objekte ma und mb). ma &lt;- cbind(m1,m2,m3,m4) mb &lt;- rbind(m1,m2,m3,m4) ma ## m1 m2 m3 m4 ## [1,] 2 8 3 9 ## [2,] 4 9 5 8 ## [3,] 7 5 5 7 ## [4,] 9 2 5 6 mb ## [,1] [,2] [,3] [,4] ## m1 2 4 7 9 ## m2 8 9 5 2 ## m3 3 5 5 5 ## m4 9 8 7 6 Als nächster Schritt wendet apply() dann eine bestimmte Funktion auf ein Objekte an. Bei einem Objekt des Typs Matrix muss allerdings noch spezifiziert werden, ob die Funktion Zeilen- oder Spalteweise angewendet wird. Zeilen oder Spalten werden über die Zahlen 1 bzw. 2 definiert. apply(ma, 1, mean) ## [1] 5.5 6.5 6.0 5.5 apply(ma, 2, mean) ## m1 m2 m3 m4 ## 5.5 6.0 4.5 7.5 apply(mb, 1, mean) ## m1 m2 m3 m4 ## 5.5 6.0 4.5 7.5 apply(mb, 2, mean) ## [1] 5.5 6.5 6.0 5.5 So ergeben sich insgesamt vier Möglichkeiten, für die Berechnung der des Durchschnitts  allerdings finden sich nur zwei unterschiedliche Ergebnisse. Was passiert nun hier? apply(ma, c(1,2), mean) ## m1 m2 m3 m4 ## [1,] 2 8 3 9 ## [2,] 4 9 5 8 ## [3,] 7 5 5 7 ## [4,] 9 2 5 6 ma ## m1 m2 m3 m4 ## [1,] 2 8 3 9 ## [2,] 4 9 5 8 ## [3,] 7 5 5 7 ## [4,] 9 2 5 6 apply(ma, c(1,2), var) ## m1 m2 m3 m4 ## [1,] NA NA NA NA ## [2,] NA NA NA NA ## [3,] NA NA NA NA ## [4,] NA NA NA NA Hier wird eine Funktion sowohl auf Spalten als auch auf Zeilen angewendet - das heisst einfach auf die einzelnen Werte. Von einem einzelnen Wert kann man dann das arithmetische Mittel berechen, hingegen nicht die Varianz: var(2) ## [1] NA mean(2) ## [1] 2 Als Ergänzung finden Sie hier noch ein sozialwissenschaftliches Beispiel einer solchen Matrix von Katrin Oesch: Alter &lt;-c(32,61,45,29) Arbeitsjahre &lt;- c(14,33,20,2) Monatseinkommen &lt;- c(5500,8700,10200,3750) Ausbildungsjahre &lt;- c(3,12,9,7) DS_1 &lt;-c(Alter, Arbeitsjahre, Monatseinkommen, Ausbildungsjahre) Matrix_1 &lt;- matrix(DS_1, nrow = 4, ncol = 4, byrow = F) colnames(Matrix_1) &lt;- c(&quot;Alter&quot;,&quot;Ausbildungsjahre&quot;,&quot;Monatseinkommen&quot;,&quot;Ausbildungsjahre&quot;) apply(Matrix_1, MARGIN=2, FUN = mean) ## Alter Ausbildungsjahre Monatseinkommen Ausbildungsjahre ## 41.75 17.25 7037.50 7.75   Erstellen Sie je einen Vektor mit numerischen Daten, textförmigen Daten und logischen Daten. Die Funktionen as.numeric(), as.character() und as.logical() lassen Sie eine Datenarten in eine andere zwingen bzw. als eine andere Datenart interpretieren. Wann funktioniert dies? Und wo sind die Grenzen dieses Zwingens? a &lt;- c(0, 1, 2) b &lt;- c(TRUE, FALSE, T) #Die logischen Objekte können sowohl ausgeschreiben als auch lediglich als T und F aufgeführt werden c &lt;- c(&quot;null&quot;, &quot;eins&quot;, &quot;zwei&quot;) #die Anführungs- und Schlusszeichen beachten Nachdem wir die Vektoren definiert haben, können wir deren Typ bestimmen und mit den as.-Funktionen spielen: is.numeric(a) ## [1] TRUE is.logical(b) ## [1] TRUE is.character(c) ## [1] TRUE as.numeric(b) ## [1] 1 0 1 as.numeric(c) ## Warning: NAs durch Umwandlung erzeugt ## [1] NA NA NA as.logical(a) ## [1] FALSE TRUE TRUE as.logical(c) ## [1] NA NA NA as.character(a) ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; as.character(b) ## [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;TRUE&quot; Die Grenzen dieses Zwingens der as.-Funktionen finden sich auf der einen Seite im Zusammenhang zu den logischen Daten: Dies funktioniert nur mit numerischen Daten  und alles über 1 wird als TRUE interpretiert. Auf der anderen Seite zeigt sich die Grenze bei ausgeschriebenen Zahlen in einem Charakter-Vektor. Diese können von R nicht in numerische oder auch logische Daten umformuliert werden. Allerdings gilt es eine wichtige Ausnahme zu beachten, nämlich wenn Zahlen als Charakter aufgeführt wurden: c2 &lt;- c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;) is.character(c2) ## [1] TRUE as.numeric(c2) ## [1] 0 1 2 as.logical(as.numeric(c2)) ## [1] FALSE TRUE TRUE Insbesondere beim Importieren von Datensätzen, die nicht in einem Rohformat gespeichert sind (etwa .sav Dateien), kann es passieren, dass metrische Variablen als Charakter-Vektor eingelesen werden.   Definieren Sie folgende Vektoren mittels der Funktionen seq() und rep(): Vektor 3a: 1 2 3 4 5 6 7 8 9 10 seq(from = 1, to = 10, by = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 #oder einfacher noch: seq(1, 10, 1) ## [1] 1 2 3 4 5 6 7 8 9 10 Vektor 3b: 1 1 1 2 2 2 3 3 3 c(rep(1,3), rep(2,3), rep(3,3)) ## [1] 1 1 1 2 2 2 3 3 3 Vektor 3c: Die Zahlen des Vektors b als ausgeschriebene Wörter c(rep(&quot;Eins&quot;,3), rep(&quot;Zwei&quot;,3), rep(&quot;Drei&quot;,3)) ## [1] &quot;Eins&quot; &quot;Eins&quot; &quot;Eins&quot; &quot;Zwei&quot; &quot;Zwei&quot; &quot;Zwei&quot; &quot;Drei&quot; &quot;Drei&quot; &quot;Drei&quot; Vektor 3d: 1 4 7 10 13 seq(1, 13, 3) ## [1] 1 4 7 10 13 Vektor 3e: 1 4 9 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1100 14899 678999 V3e &lt;- c(1, 4, 9, seq(50, 100, 1), 1100, 14899, 678999) V3e ## [1] 1 4 9 50 51 52 53 54 55 56 ## [11] 57 58 59 60 61 62 63 64 65 66 ## [21] 67 68 69 70 71 72 73 74 75 76 ## [31] 77 78 79 80 81 82 83 84 85 86 ## [41] 87 88 89 90 91 92 93 94 95 96 ## [51] 97 98 99 100 1100 14899 678999   Was macht das Argument trim für die Funktion mean()? Wozu könnten Sie dieses Argument in einem sozialwissenschaftlichen Kontext nutzen? Spezifizieren Sie das Argument auf sinnvolle Weise, um das arithmetische Mittel des in Aufgabe 3e erstellten Vektors zu berechnen! Mittels des Arguments trim können bestimmte Anteile der Elemente eines Vektors für die Berechnung entfernt werden. Dies ermöglicht es Extremwerte (sowohl sehr hohe als auch sehr tiefe Werte) aus der Berechnung zu entfernen. mean(V3e) ## [1] 12260.3 mean(V3e, trim = 0.1) ## [1] 75 Was erfolgt nun genau mit dem Wert 0.1? Eine Formel von Fabio Keller: V3e ## [1] 1 4 9 50 51 52 53 54 55 56 ## [11] 57 58 59 60 61 62 63 64 65 66 ## [21] 67 68 69 70 71 72 73 74 75 76 ## [31] 77 78 79 80 81 82 83 84 85 86 ## [41] 87 88 89 90 91 92 93 94 95 96 ## [51] 97 98 99 100 1100 14899 678999 #...die zwei kleinsten und grössten Werte 0.05 * length(V3e) ## [1] 2.85 mean(V3e, trim = 0.05) ## [1] 93.09434 #...die drei kleinsten und grössten Werte 0.06 * length(V3e) ## [1] 3.42 mean(V3e, trim = 0.06) ## [1] 75 Warum ändert sich allerdings nichts am Durchschnittswert, egal wie ich trim im Bereich zwischen 0.06 und 0.5 definiere (0.5 ist der Maximalwert)? mean(V3e, trim = 0.1) ## [1] 75 mean(V3e, trim = 0.49) ## [1] 75 Da der Vektor eine Zahlenreihe ist bleibt der Durchschnittswert immer gleich wenn jeweils von den Enden dieselbe Anzahlobjekte entfernt wird.   Sie sollen verschiedene Paare von Vektoren mittels der Funktionen c(), rep() und seq() definieren, die jeweils unterschiedlich korrelieren. Diese Vektoren  d.h. Variablen  und deren Korrelationen sollen sozialwissenschaftlichen Phänomenen entsprechen. Berechnen Sie jeweils den Korrelationskoeffizienten. Ein Paar von Vektoren (mit je einer Länge von rund 100) soll eine Korrelation von ca. 0.4 aufweisen, anhand eines Beispiels von Vanessa Leutner: Freundschaften &lt;- rep(c(2, 3, 10, 4, 1, 6, 3, 3, 3, 4, 4, 1, 9, 4, 2, 8, 5, 6, 3, 4), each = 5) Lebenszufriedenheit &lt;- rep(c(2, 2, 6, 3, 4, 5, 1, 4, 3, 5, 1, 5, 6, 1, 1, 4, 3, 4, 7, 1), each =5) cor(Freundschaften, Lebenszufriedenheit) ## [1] 0.403411 Ein Paar von Vektoren (mit je einer Länge von rund 100) soll eine sehr starke Korrelation aufweisen, anhand eines Beispiels von Dario Haab: VektorA &lt;- seq(1, 100, by = 1) VektorB &lt;- rep(1:50, each = 2) cor(VektorA, VektorB) ## [1] 0.99985 Wie könnte dieses Beispiel sozialwissenschaftlich interpretiert werden? Die Verteilung könnte beispielsweise von einer Firma stammen, die ihre Löhne alle zwei Jahre bei den Mitarbeiter*innen erhöht. Ein Paar von Vektoren (mit je einer Länge von rund 100) soll eine schwache negative Korrelation aufweisen, anhand eines Beispiels von Julien Lattmann: Alter &lt;- rep(seq(15, 65, 2), 4) Nutzungsdauer_Smartphone &lt;- c(rep(seq(120, 30, -10), 3), rep(70, 20), rep(50, 20), rep(30, 20), rep(10, 14)) cor(Alter, Nutzungsdauer_Smartphone) ## [1] -0.1453604 3.3 Ergänzung: Seitenumbruch im RMarkdown In der Einheit wurde noch kurz besprochen, wie es in RMarkdown möglich ist, einen Seitenumbruch für das geknittete PDF einzufügen. Josias Bruderer schlug vor \\newpage im Text einzufügen. Eine weitere Möglichkeiten könnten auch \\pagebreaksein (siehe hier). "],["wochenplan-04.html", "4 Wochenplan 04 4.1 Lernziele 4.2 Aufgaben", " 4 Wochenplan 04 Vorbereitung von der 04. auf die 05.Einheit. 4.1 Lernziele Nachdem wir uns bereits verschiedenste Grundlagen für die Arbeit mit R Studio erarbeitet und erste statistische Inhalte kennengelernt haben stehen nun einige ergänzende Aspekte an. Mittels diesen Aspekten wollen wir uns immer näher an die tatsächliche Arbeit der sozialwissenschaftlichen Datenanalyse bewegen: grafische Techniken sollen ausprobiert, Zufallsvariablen kennengelernt und weitere Datensätze erstellt werden. Der vierte Wochenplan soll uns so nicht zuletzt vorbereiten, das Prinzip der Inferenzstatistik mittels R zu verstehen. Konkret lassen sich folgende Seminarziele festhalten: Sie können zwei Variablen in einem Streudiagramm darstellen und die Darstellungen interpretieren. Sie kennen den Unterschied von Gleichverteilungen und Normalverteilungen und können in R entsprechend verteilte Zufallsvariablen erstellen. Sie können metrische Verteilungen in Histogrammen darstellen. Sie haben erste Techniken kennenglernt, wie Grafiken erweitert und kombiniert werden können. Sie verstehen, was ein Dataframe in R ist und können die Unterschiede zu einer Matrix benennen. Sie haben sich in R die Grundlagen für ein Verständnis von Inferenzstatistik allgemein und des Stichprobenfehlers im Besonderen erarbeitet. 4.2 Aufgaben Nutzten Sie plot() um die Verteilung eines Variablen-Paars darszustellen, das Sie im Rahmen des letzten Wochenplans und der Aufgabe zu den Korrelationen erstellt haben. Verwenden Sie weiter auch eine Farbe für den Plot und verweisen Sie im Titel sowie in den Achsenbeschriftungen auf das sozialwissenschaftliche Phänomen, das Sie darstellen. Als Beispiel dient hier ein Variablenpaar von Delia Bazzigher, das eine schwach-positive Korrelation aufweist: age &lt;- c(11, 16, rep(seq(12, 25, 3), 7), 17, 27, rep(seq(12, 70, 3), 3), 22) screenhours &lt;- c(rep(c(20, 25, 24, seq(23, 70, 3), 19, 20), 4), rep(40:47, 2)) cor(age, screenhours) ## [1] 0.2039158 Zuerst ein simpler Plot plot(age, screenhours) dann wir dann über diverse Elemente erweitern können: help(plot) Implizit haben wir immer schon einen Typ bestimmt, nämlich type= \"p\" davon können wir die Punktform und Grösse bestimmten: pch = &amp; lwd = Titel (auch mit Zeilenumbruch): main = Achsenbeschriftung: xlab = &amp; ylab = Grössen des Textes: cex.lab = Farbe (sowohl über eine schriftliche Bezeichnung als auch über Zahlen): col = () plot(age, screenhours, type = &quot;p&quot;, pch = 15, lwd = 2, main = &quot;Zusammenhang zwischen Alter und \\nZeit, die vor einem Bildschirm verbracht wurde&quot;, xlab = &quot;Alter (j)&quot;, ylab = &quot;Bildschirmzeit (h)&quot;, cex.lab = 1.2, col = c(1:100) )   Erstellen Sie Vektoren für eine Gleichverteilung mittels runif() und für eine Normalverteilung mittels rnorm(). Diese Vektoren sollen als Variablen Körpergrössen repräsentieren. Erstellen Sie die jeweils zwei Vektoren in unterschiedlichen Längen, und zwar m Folgenden werden die in der Aufgabe verlangten Verteilungen als Histogramme dargestellt. Insbesondere bei grösseren Fallzahlen werden so die Eigenschaften der Verteilungen deutlicher: Bei der Gleichverteilung hat jede Ausprägung dieselbe Auftrittswahrscheinlichkeit. Das heisst, dass jede Körpergrösse zwischen Minimal- und Maximalwert (die beiden Parameter der Funktion runif()) mit derselben Häufigkeit vorkommt. Dies entspricht aber nicht der empirischen Realität von Körpergrössen. Bei der Normalverteilung gruppieren sich die meisten Werte um den Mittelwert von 170cm, während kleine und grosse Werte mit zunehmender Abweichung immer weniger häufig auftreten. Dies wiederum entspricht stärker der tatsächlichen, empirischen Verteilungen von Körpergrössen. Unterschieden werden die Normalverteilungen (auch in der Funktion rnorm()) über die beiden expliziten Parameter des arithmetischen Mittels und der Standardabweichung (Diaz-Bone 2019, 140f). mit je 10 Fällen: summary(runif(10,150,210)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 150.2 172.0 181.8 179.9 188.2 205.6 summary(rnorm(10,180,10)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 160.5 177.6 183.1 182.4 188.7 195.0 hist(runif(10,150,210)) hist(rnorm(10,180,10)) mit je 30 Fällen: summary(runif(30,150,210)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 153.8 161.9 177.9 180.1 196.8 207.1 summary(rnorm(30,180,10)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 157.5 172.7 179.3 179.5 184.7 205.1 hist(runif(30,150,210)) hist(rnorm(30,180,10)) und mit je 1000 Fällen: summary(runif(1000,150,210)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 150.0 166.3 180.3 180.4 195.0 209.9 summary(rnorm(1000,180,10)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 146.3 173.1 179.3 179.4 185.9 209.2 hist(runif(1000,150,210)) hist(rnorm(1000,180,10)) Als Ergänzung: runif() und rnorm() werden noch von der Funktion rbinom() ergänzt, die zufällige binomiale Verteilungen erstellt. Dies sind Verteilungen die angeben, ob ein Ereignis bei einer bestimmten Wahrscheinlichkeit eingetreten ist oder nicht. Damit kann zum Beispiel aufgezeigt werden, wie oft Sie bei zehn Münzwürfen Kopf bekommen (Beispiel 1), oder auch wie oft Sie bei 100 Mal würfeln mit zwei Würfeln zwei Sechsen erzielen (Beispiel 2). rbinom(10, size = 1, prob = 0.5) #Beispiel 1 ## [1] 0 1 1 1 1 1 0 1 0 0 rbinom(100, 2, (1/6 * 1/6)) #Beispiel 2 ## [1] 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [38] 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   Als nächstes sollen Sie die beiden Verteilungen aus der Aufgabe 2, die 1.000 Fälle aufweisen, grafisch darstellen. Wie können die 10 Klassen erreicht werden? Die Variante breaks = 10 scheint nicht immer zu funktionieren, sondern ist lediglich ein zu erreichender Vorschlag (vgl. die Hinweise in der Hilfe zu hist() unter dem Punkt breaks). Wir können aber die Punkte, wo die Klassenumbrüche erfolgen sollen, selber bestimmen. Insbesondere bei Gleichverteilungen mit deren klaren Grenzen funktionerit dies einfach über eine Sequenz. Bei der Normalverteilung müssten wir die Punkte, wo die Breaks erfolgen, teilweise noch händisch bestimmen. hist(runif(1000,150,210), main = &quot;Körpergrösse, \\n gleichverteilt&quot;, xlab = &quot;Körgpergrösse (cm)&quot;, col = &quot;darkgreen&quot;, xlim = c(150,210), breaks = seq(from=150, to=210, by= ((210-150)/10))) hist(rnorm(1000,180,10), main = &quot;Körpergrösse, \\n normalverteilt&quot;, xlab = &quot;Körgpergrösse (cm)&quot;, col = &quot;orange&quot;, xlim = c(150,210), breaks = c(100, 156, 162, 168, 174, 180, 186, 192, 198, 204, 300)) Über die Funktion abline() kann dem aktuellen Plot eine Linie hinzugefügt werden. Fügen Sie jeweils einem Histogramm den Mittelwert der anderen Verteilung als vertikale Linie hinzu (ebenfalls in der entsprechenden Farbe). hist(runif(1000,150,210), main = &quot;Körpergrösse, \\n gleichverteilt&quot;, xlab = &quot;Körgpergrösse (cm)&quot;, col = &quot;darkgreen&quot;, xlim = c(150,210), breaks = seq(from=150, to=210, by= ((210-150)/10))) abline(v = mean(rnorm(1000,180,10)), col = &quot;orange&quot;, lwd = 3) hist(rnorm(1000,180,10), main = &quot;Körpergrösse, \\n normalverteilt&quot;, xlab = &quot;Körgpergrösse (cm)&quot;, col = &quot;orange&quot;, xlim = c(150,210), breaks = c(100, 156, 162, 168, 174, 180, 186, 192, 198, 204, 300)) abline(v = mean(runif(1000,150,210)), col = &quot;darkgreen&quot;, lwd = 3) Hinweis: Es konnte zu Problemen beim knitten führen, wenn die abline() in einem anderen Codechunk aufgerufen wurde. Das Argument add = TRUE lässt Sie eine neue Grafik über die aktuelle Grafik legen. Versuchen Sie, auf diese Art Ihre beiden Histogramme in einer Grafik darzustellen. Hierzu können noch drei weitere Anpassungen vorgenommen werden: Die Dimensionen der Y-Achse können angepasst werden über ylim =. Die Farben der Histogramme können transparent gemacht werden in dem wir auf RGB Werte zurückgreifen (ein Vorschlag von Felix Sigrist). Wir können der Grafik noch eine Legende hinzufügen (ein Vorschlag von Josias Bruderer). hist(runif(1000,150,210), main = &quot;Körpergrössen&quot;, xlab = &quot;Körgpergrösse (cm)&quot;, col = &quot;darkgreen&quot;, xlim = c(145,215), ylim = c(0, 250)) #Funktion um die RGB-Daten der Farbe &quot;Orange&quot; zu erhalten: col2rgb(&quot;orange&quot;) ## [,1] ## red 255 ## green 165 ## blue 0 hist(rnorm(1000,180,10), col = rgb(255, 165, 0, 255/4, maxColorValue = 255), add = T) abline(v = mean(rnorm(1000,180,10)), col = &quot;orange&quot;, lwd = 3) abline(v = mean(runif(1000,150,210)), col = &quot;darkgreen&quot;, lwd = 3) legend(195, 200, legend = c(&quot;gleichverteil&quot;, &quot;normalverteilt&quot;), fill = c(&quot;darkgreen&quot;,&quot;orange&quot;), cex = 0.75 )   Erzeugen Sie ein Dataframe, das aus fünf Variablen besteht und 100 Fälle umfasst. Nutzen Sie dazu die verschiedenen Funktionen, die wir bisher kennengelernt haben (Zufallsvariablen, rep(), seq(), ). Probieren Sie ebenfalls, dass die fünfte Variablen dem Character Datenformat entspricht. Überlegen Sie sich einen sozialwissenschaftlichen Kontext für dieses Dataframe und benennen Sie die Variablen dementsprechend. Mit diesem Datensatz werden wir im nächsten Wochenplan weiterarbeiten. Für diese Aufgabe gab es viele tolle Beispiele. Hier zwei Varianten, einmal von Vanessa Leutner und einmal von Josias Bruderer: #Beispiel von Vanessa Leutner Einkommen &lt;- c(seq(from = 2000, to = 12000, length.out = 100)) Krankheitstage &lt;- rnorm(100, mean = 6.5, sd = 3) Ausbildungsjahre &lt;- rep(c(3,6,9,3,13,4,6,7,10,5), each = 10) Anzahl_Kinder &lt;- rep(c(1,0,1,2,3,2,3,5,6,7,1,2,3,4,5,3,2,1,4,5), each = 5) Geschlecht &lt;- rep(c(&quot;weiblich&quot;, &quot;männlich&quot;, &quot;weiblich&quot;, &quot;mänlich&quot;, &quot;divers&quot;), each = 20) df_vl &lt;- data.frame(Einkommen, Krankheitstage, Ausbildungsjahre, Anzahl_Kinder, Geschlecht) #Beispiel von Josias Bruderer df_jb &lt;- data.frame(alter = round(runif(100, 18, 64)), geschlecht = sample(rep(c(seq(1,3),2,3), 20)), tvdauer = sample(round(rnorm(100, 3, 1), 0)), happiness = sample(c(sample(1:10, 80, replace = T), rep(NA, 20))), prog = sample(rep(c(&quot;Kinder&quot;,&quot;Unterhaltung&quot;,&quot;Unterhaltung&quot;,&quot;News&quot;,&quot;Sport&quot;), 20))) Die Funktion round()wurde von vielen anderen auch genutzt. Eine andere Variante zum Runden hat noch Fabio Keller vorgeschlagen, nämlich mittels as.integer(): alter = as.integer(runif(100, 18, 64)) alter ## [1] 28 52 22 39 24 23 49 56 51 62 36 40 30 43 42 58 24 59 45 51 62 36 46 62 25 ## [26] 46 44 57 57 46 55 22 42 43 49 34 50 34 40 29 23 59 19 37 19 45 30 29 32 38 ## [51] 38 39 19 63 28 31 41 51 25 28 62 46 22 26 33 26 35 39 27 62 24 61 53 21 61 ## [76] 22 56 20 37 54 41 30 47 43 59 61 43 26 55 63 27 19 36 36 58 26 62 24 31 40 Zur Wiederholung: Was ist nochmals ein Objekt des Typs data.frames (Manderscheid 2017, 39)? Während () Vektoren weitgehend dem entsprechen, was in der sozialwissenschaftlichen Statistik und in anderen Auswertungsprogrammen als Variable bezeichnet wird, enthält das Objekt Dataframe mehrere Variablen: Die Zeilen eines Dataframes enthalten die Beobachtungen als Fälle, die Spalten die Faktoren und Vektoren als Variablen. Damit entspricht ein Dataframe einem zweidimensionalen, tabellarisch darstellbaren Datensatz. Die Faktoren und Vektoren in den Spalten müssen dabei die selbe Länge, d. h. die selbe Anzahl von Elementen haben, können dabei aber sowohl Zahlen als auch Buchstaben enthalten.   Bonusaufgabe: Das Paket ggplot2 (als Teil der grösseren Paketsammlung tidyverse) ermöglicht gegenüber der Basisversion von R besonders komplexe grafische Lösungen. Versuchen Sie Ihre Variablenverteilung aus Aufgabe 1 auch mit diesem Paket darzustellen. Sie können den Beispielcode unten nutzen (die von Ihnen zu ergänzende Aspekte sind mittels den beiden Zeichen &gt;&lt; im Code versehen) und gleichzeitig etwas recherchieren, wie ggplot2 funktioniert. p1 &lt;- ggplot(data = data.frame(cbind(&gt;Variable1&lt;, &gt;Variable2&lt;)), mapping = aes(x = &gt;Variable1&lt;, y = &gt;Variable2&lt;)) p1 + geom_point(size = &gt;Zahl&lt;, color = &quot;&gt;Farbe&lt;&quot;) + ggtitle(&quot;&gt;Ihr Titel&lt;&quot;) Das Paket ggplot2 hat eine sehr eigene Logik davon, wie Grafiken erstellt werden. Im Seminar selber werden wir in diese Logik nicht vertieft einsteigen. Ein gute Einführung in das Paket und dessen Möglichkeiten bietet das Buch Data Visualization (Healy 2019). References "],["wochenplan-05.html", "5 Wochenplan 05 5.1 Lernziele WP05 5.2 Hinweise Indizieren &amp; Subsetting 5.3 Aufgaben WP05", " 5 Wochenplan 05  zur Einheit der 05. und 06.Woche. 5.1 Lernziele WP05 In der kommenden Arbeitswoche geht es nun darum, zwei neue Aspekte der Arbeit mit R kennenzulernen und einzuüben: das Zugreifen auf einzelne Elemente und Teile von Datenobjekten (Indizieren und Subsetting) und die Kontrolle von längeren Befehlsabläufen mittels Schleifen (als erste einfache, eigene Funktionen). Für das Kennenlernen und Einüben der beiden Aspekte dient uns das data.frame-Objekt, das im Rahmen des letzten Wochenplans erstellt wurde. Folgende Lernziele lassen sich festhalten: Sie können gezielt auf einzelne Teile eines Datenobjekts zugreifen und kennen verschiedene Wege, das zu tun. Sie beginnen in der Arbeit mit R gezielt Funktionen zur Abfrage von Attributen von Objekten zu nutzen. Sie verstehen, wie eine for-Schleife funktioniert und können einfache Varianten davon selbst erstellen. 5.2 Hinweise Indizieren &amp; Subsetting Wie können wir nun mittels Indizieren (Auswählen) und Subsetting (Aufteilen) auf einzelne Elemente eines Objektes zugreifen? Teilweise haben wir diesen Aspekte im Umgang mit R bereits kennengelernt  aber nur implizit! Jetzt geht es darum, dies explizit zu machen. Dabei können wir drei Varianten, mit denen wir auf Daten zugreifen: Variante: [] Die erste Variante wählt nach den Dimensionen von Objekte die Elemente aus: vektor1 &lt;- c(1,2,10,5,13,20) vektor2[4] datensatz &lt;- data.frame(vektor1, c(1,1,1,1,2,1)) datensatz datensatz[1,1] datensatz[6,1] datensatz[,0] Variante: $ Die zweite Variante funktioniert in einer Logik von benannten Unterelementen eines Objektes, wie wir dies etwa als Variablen bei Datensätzen kennen: datensatz$vektor1 Variante: which() Mittels der dritten Variante fragen wir in einem Objekt die Eigenschaften von dessen einzelnen Elementen ab. Dies entspricht einer Vorstellung auf das Zugreifen von Fällen. Und wir tun dies über logische Bedingungen: which(datensatz$vektor1==20) Sie sehen bereits im letzten Beispiel, dass die Varianten kombinert werden können. Damit können wir uns Beispielweise einen Teildatensatz erstellen: datensatz[which(datensatz$vektor1==20),] datensatz[datensatz$vektor1==20,] #als einfachere Schreibweise 5.3 Aufgaben WP05 Wenden Sie die Funktionen dim(), names(), str(), class() und typeof() auf Ihren Datensatz an (d.h. das data.frame-Objekt an, welches Sie im Rahmen des letzten Wochenplans erstellt haben). Was sagen Ihnen diese Funktionen jeweils? Welcher Output dieser Funktionen leuchtet Ihnen ein, welcher weniger? Ein erster Datensatz von Valentina Meyer: #data.frame-Objekt von letzter Woche: #Vorbereitung Age &lt;- c(runif(100, min = 13, max = 18)) Alter &lt;- as.character(Age) #Dataframe erstellen df_VM &lt;- data.frame(ID=c(1:100), Alter, Gewicht= c(rep(15,4), rep(16,4), rep(17,8),rep(18,12), rep(19,14), rep(20,16), rep(21,18), rep(22, 12), rep(23, 8), rep(24,4)), Sport= c(seq(10,50,2), seq(50,100,3), seq(100,150,4), seq(150,200,3), seq(200,240,2), rep(120,5), rep(60,6)), Internetnutzung= c(seq(10,50,4), seq(50,100,3), seq(100,150,2), seq(150,200,3), seq(200,240,4), rep(100,6), rep(180,8), rep(60,4))) Über die Funktion view() oder indem wir im Environment-Fenster auf das Objekt des Datensatzes klicken können wir das erstelte Objekt auch betrachten. Was sagen uns nun die einzelnen Funktionen der Aufgabenstellung aus? dim(df_VM) ## [1] 100 5 die Dimensionen Ihres Datensatzes: die Zeilen- und Spaltenzahl, was der Anzahl Fällen und Variablen im Datensatz entspricht. Auf diese Dimensionen greifen Sie dann auch mittels den [] zu. names(df_VM) ## [1] &quot;ID&quot; &quot;Alter&quot; &quot;Gewicht&quot; &quot;Sport&quot; ## [5] &quot;Internetnutzung&quot; die Namen Ihrer Vektoren aus, also die Variablennamen im Datensatz. Diese können wir dann auch verändern: names(df_VM)[4] &lt;- &quot;Sportminuten&quot; Hingegen werden die Namen der Reihen (die Fallnummern) nicht ausgegeben. Diese können wir auch ändern falls wir wollten über rownames(). Die Änderung sehen wir dann im Datenviewer. rownames(df_VM)[2] &lt;- &quot;Fall-Zwei&quot; str(df_VM) ## &#39;data.frame&#39;: 100 obs. of 5 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Alter : chr &quot;14.4660895359702&quot; &quot;13.9345591184683&quot; &quot;15.7792836318258&quot; &quot;13.5771148554049&quot; ... ## $ Gewicht : num 15 15 15 15 16 16 16 16 17 17 ... ## $ Sportminuten : num 10 12 14 16 18 20 22 24 26 28 ... ## $ Internetnutzung: num 10 14 18 22 26 30 34 38 42 46 ... die Struktur Ihres Datensatzes aus, das heisst die Unterobjekte bzw. Variablen im Datensatz, auf die Sie mittels dem Dollarzeichen zugreifen können. Diese Funktion bietet bieten eine schnelle Übersicht, etwa um Umkodierungen in einem Datensatz zu erkennen oder allgemein auszuweisen, was in einem Objekt enthalten ist. class(df_VM) ## [1] &quot;data.frame&quot; die Klasse Ihres Objektes, das heisst die von Ihnen zugewiesene Eigenschaft des Objektes. Für einen data.frame-Objekt bedeutet dies folgendes (aus der Hileseite der Funktion): A data frame is a structure in R that holds data and is similar to the datasets found in standard statistical packages (for example, SAS, SPSS, and Stata). The columns are variables and the rows are observations. You can have variables of different types (for example, numeric, character) in the same data frame. Data frames are the main structures youll use to store datasets. typeof(df_VM) ## [1] &quot;list&quot; und der Typ Ihres Objektes, das heisst die R-interne Art und Weise, die Daten Ihres Objektes abzuspeichern (hier zeigt sich also die Datenart, und nicht die Objektart/-typ). Listen ist die Speicherweise für verschiedenen Datenformen und kann verschiedene Objekte (bzw. verschiedene Klassen von Objekten) enthalten. Eine weitere nützliche Funktion (für data.frame Objekte und andere) ist summary(): summary(df_VM) ## ID Alter Gewicht Sportminuten ## Min. : 1.00 Length:100 Min. :15.00 Min. : 10.00 ## 1st Qu.: 25.75 Class :character 1st Qu.:18.00 1st Qu.: 59.75 ## Median : 50.50 Mode :character Median :20.00 Median :120.00 ## Mean : 50.50 Mean :19.84 Mean :120.38 ## 3rd Qu.: 75.25 3rd Qu.:21.00 3rd Qu.:186.75 ## Max. :100.00 Max. :24.00 Max. :240.00 ## Internetnutzung ## Min. : 10.00 ## 1st Qu.: 79.25 ## Median :123.00 ## Mean :124.96 ## 3rd Qu.:180.00 ## Max. :240.00 Die Funktion gibt uns für jede Variable eine Übersicht. Sie berechnet bei den metrischen Variablen die Mittelwerte sowie Streuungsmasse und bei Character-Daten die Klasse. Weiter würden auch noch NAs angezeigt, falls diese vorhanden wären. Die Funktion, so könnten wir zusammenfassen, berechnet also immer wieder dieselben Dinge für alle Variablen eines Datensatzes. Eine solche Repetition und Kontrolle von Befehlsabläufen können wir auch selber herstellen über sogenannte Schleifen. Grundsätzlich sind diese for-Schleifen so aufgebaut: for (Variation in Sequenz){ Funktion; } Im ersten Teil (vor den {}-Klammern) befindet sich der sogenannte Funktionskopf, in dem formale Elemente definiert sind, also mit welcher Variation einer Sequenz etwas ablaufen soll. Anschliessend folgt in den {}-Klammern der Funktionsrumpf, der bestimmt, was genau in der Schleife passieren soll. Hier ein einfaches Beispiel: for (i in 1:2) { print(i) } oder bezogen auf einen Datensatz: for (i in 1:2) { print(df_VM[,i]) } #bzw. for (i in 1:2) { print(df_VM[i,]) } Dies können wir auch erweitern, in dem wir nicht eine bestimmte Zahl definieren in den formalen Elementen, sondern die Anzahl Spalten oder Anzahl Zeilen abfragen  und uns so eigentlich den ganzen Datensatz ausgeben lassen: for (i in 1:ncol(df_VM)) { print(df_VM[,i]) } #bzw. for (i in 1:nrow(df_VM)) { print(df_VM[i,]) } Im folgenden Code-Chunk wird nun eine solche for-Schleife definiert, welche die vorherige Funktion für die metrischen Variable im Datensatz immitiert. Zuerst wird dies nur für mean() umgesetzt. Anschliessend werden noch min() und max() ergänzen im Funktionsrumpf. for (i in 3:ncol(df_VM)) { print(mean(df_VM[,i])) } summary(df_VM) #Ergänzung von min und max: for (i in 3:ncol(df_VM)) { print(names(df_VM[i])); print(c(&quot;Min&quot;, min(df_VM[,i]))); print(c(&quot;Mean&quot;, mean(df_VM[,i]))); print(c(&quot;Max&quot;, max(df_VM[,i]))); } #Verwendung von cat() anstelle von Print -- ein Vorschlag von Josias Bruderer for (i in 3:ncol(df_VM)) { cat(c(&quot;\\n&quot;, names(df_VM[i]))); cat(c(&quot; Min&quot;, min(df_VM[,i]))); cat(c(&quot; Mean&quot;, mean(df_VM[,i]))); cat(c(&quot; Max&quot;, max(df_VM[,i]))); }   2. Wählen Sie aus Ihrem Datensatz die Fälle 20 bis 30 sowie die zweite und dritte Variable aus (ohne einen Teildatensatz zu erstellen). Tun Sie dies auf zwei verschiedene Varianten! Variante 1 mittels [] und dem Zugreifen auf die Dimensionen des Datensatzes: df_VM[c(20:30), c(2,3)] #oder einfach: df_VM[20:30, 2:3] #oder df_VM[20:30, c(&quot;Alter&quot;, &quot;Gewicht&quot;)] Variante 2 mittels $ und dem Zugreifen auf die Dimensionen der Vektoren bzw. Variablen: cbind(df_VM$Alter[20:30], df_VM$Gewicht[20:30]) Wie könnten wir vorgehen, wenn wir genau diese Fälle und Variablen nicht wollten? Wir nutzen eine negative c()-Funktion: df_VM[-c(20:30), -c(2,3)]   3. Suchen Sie Fälle in Ihrem Datensatz unter der Verwendung von mindestens zwei Variablen. Diese Fälle sollen spezielle oder interessante Beispiele repräsentieren  begründen Sie Ihre Wahl! Falls Sie keine solche Fälle in Ihrem Datensatz finden können Sie vorhandene Ausprägungen auch anpassen. Ein Datensatz und Beispiel von Fabio Keller: gender &lt;- as.integer(runif(100, 0, 2)) income &lt;- rnorm(100, 10000, 4000) education &lt;- as.integer(rnorm(100, 2, 0.8)) age &lt;- runif(100, 18, 90) home &lt;- sample(c(rep(c(&quot;countryside&quot;, &quot;suburb&quot;, &quot;city&quot;), each = 33), &quot;city&quot;)) df_FK &lt;- data.frame(gender, income, education, age, home) #Ein spezieller Fall? which(df_FK$income &gt; 15000 &amp; df_FK$education == 0) ## [1] 86 #oder einfach: df_FK[df_FK$income &gt; 15000 &amp; df_FK$education == 0,] ## gender income education age home ## 86 1 17368.97 0 61.26299 suburb Ein Datensatz und Beispiel von Vanessa Leutener: Einkommen &lt;- c(seq(from = 2000, to = 12000, length.out = 100)) Krankheitstage &lt;- round(rnorm(runif(100, min = 3, max = 40), mean = 6.5, sd =3)) Ausbildungsjahre &lt;- (rep(c(3, 6, 9, 3, 13, 4, 6, 7, 10, 5), each = 10)) Anzahl_Kinder &lt;- rep(c(1, 0, 1, 2, 3, 2, 2, 0, 0 , 1, 7, 2, 3, 1, 0, 0, 2, 2,5, 0), each = 5) Geschlecht &lt;- sample(rep(c(&quot;weiblich&quot;, &quot;männlich&quot;, &quot;divers&quot;, &quot;männlich&quot;, &quot;weiblich&quot;), each = 20)) df_VL &lt;- data.frame(Einkommen, Krankheitstage, Ausbildungsjahre, Anzahl_Kinder, Geschlecht) # Eine erste Feststellung: plot(df_VL$Ausbildungsjahre, df_VL$Anzahl_Kinder) # Wie könnten wir jetzt spezielle Fälle finden? which(df_VL$Ausbildungsjahre&gt;mean(df_VL$Ausbildungsjahre) &amp; df_VL$Anzahl_Kinder&gt;mean(df_VL$Anzahl_Kinder)) ## [1] 21 22 23 24 25 26 27 28 29 30 81 82 83 84 85 86 87 88 89 90 # Hier weisen wir einfach noch dem 50 Fall (mit hoher Bildung) eine hohe Anzahl Kinder zu: df_VL$Anzahl_Kinder[50] &lt;- 8   4. Definieren Sie eine logische Bedingung die Ihnen erlaubt, Ihr Dataframe anhand der Character-Variable in zwei Gruppen zu teilen. Dies ist eine erste Variante um Teildatensätz zu erstellen (TD1 &amp; TD2). Teilen Sie dann als zweite Variante Ihren Datensatz anhand einer anderen logischen Bedingung in zwei andere Gruppen (TD3 &amp; TD4). Nutzen Sie hierfür wenn möglich zwei numerische Variablen. Ein Datensatz und Beispiel von Katrin Oesch: Wohnort &lt;-c(rep(1:6, times=5),3,4,2,2,6,5,1, rep(1,times=10),5,3,4,1,1,3, rep(seq(from=1, to=6, by=2),times=7), rep(3, times=8), rep(seq(from=1, to=6, by=3),times=9)) Lebenszufriedenheit &lt;-c(rep(seq(from=1,to=10, by=2),times=9), rep(4:6, times=12),10,9,4,4,8,7, rep(5,times=7),8,3,4, seq(from=2, to=9, by=3)) Alter_KO &lt;-c(rep(33:44),seq(from=28,to=66,by=4), 54,62,42,85,66,41,91,23, rep(43,times=7),87,44,43,65,31, rep(31:56),43,23,31,65,43,25,26,36, rep(seq(from=54,to=71,by=5),times=2), rep(28:35, each=2)) Arbeitsstatus &lt;-c(rep(1:8, times=5),4,2,2,6,5,7, rep(1,times=10),rep(2,times=4),5,3,4,1,3, rep(seq(from=1, to=8, by=2),times=), rep(3, times=8),5,6, rep(seq(from=1, to=8, by=3),times=7)) Abstimmungsberechtigung &lt;- c(rep(&quot;Ja&quot;,times=25), &quot;Nein&quot;,&quot;Nein&quot;,&quot;Ja&quot;,&quot;Nein&quot;,&quot;Nein&quot;,&quot;Ja&quot;,&quot;Nein&quot;, &quot;Nein&quot;,&quot;Ja&quot;,&quot;Nein&quot;,&quot;Nein&quot;, &quot;Ja&quot;, rep(&quot;Nein&quot;,times=15), &quot;Ja&quot;,&quot;Nein&quot;,&quot;Nein&quot;,&quot;Ja&quot;,&quot;Nein&quot;,&quot;Nein&quot;, &quot;Ja&quot;,&quot;Nein&quot;,&quot;Nein&quot;,&quot;Ja&quot;,&quot;Ja&quot;, rep(&quot;Ja&quot;,times=33),&quot;Nein&quot;,&quot;Ja&quot;,&quot;Nein&quot;,&quot;Ja&quot;) df_KO &lt;-data.frame(Wohnort, Lebenszufriedenheit, Alter_KO, Arbeitsstatus, Abstimmungsberechtigung) #und die vier Teildatensätz: berechtigt &lt;- which(df_KO$Abstimmungsberechtigung==&quot;Ja&quot;) TD1_KO &lt;- df_KO[berechtigt,] nichtberechtigt &lt;- which(df_KO$Abstimmungsberechtigung==&quot;Nein&quot;) TD2_KO &lt;- df_KO[nichtberechtigt,] staedtisch_alt &lt;- which(df_KO$Wohnort&lt;=3 &amp; df_KO$Alter&gt;=40) TD3_KO &lt;- df_KO[staedtisch_alt,] #Wie könnten wir den Vektor &#39;staedtisch_alt&#39; nutzen? TD4_KO &lt;- df_KO[-c(staedtisch_alt),] #Wir nehmen also einfach &quot;alle anderen&quot;.   5. Berechnen Sie jeweils die Standardabweichungen einer Variable bei den vier Teildatensätze, die Sie in Aufgabe 3 erstellt haben. Was wären (kurze) sozialwissenschaftliche Interpretationen Ihrer Ergebnisse? Ein Datensatz und Beispiel von Josias Bruderer: #Datensatz df_JB &lt;- data.frame(alter = round(runif(100, 18, 64)), geschlecht = sample(rep(c(seq(1,3),2,3), 20)), tvdauer = sample(round(rnorm(100, 3, 1), 0)), happiness = sample(c(sample(1:10, 80, replace = T), rep(NA, 20))), prog = sample(rep(c(&quot;Sandmännchen&quot;,&quot;Tagesschau&quot;, &quot;Akte-X&quot;,&quot;Simpsons&quot;,NA), 20))) TD1_JB &lt;- df_JB[which(!is.na(df_JB$prog)),] # Angabe zu Programm vorhanden TD2_JB &lt;- df_JB[which(is.na(df_JB$prog)),] # Angabe zu Programm nicht vorhanden #Berechnung der Standardabweichung für zwei Teildatensätze: for(t in list(TD1_JB, TD2_JB)){ print(mean(t$tvdauer, na.rm = T)); print(sd(t$tvdauer, na.rm = T)) } ## [1] 2.8125 ## [1] 1.202253 ## [1] 3.35 ## [1] 1.03999 Hier sehen wir ein komplexeres Beispiel einer Schleife, dass die Möglichkeit von Listen nutzt. Schleifen können daher beliebig komplex werden  und sie sind ein erster Schritt hin zum Schreiben von eigenen Funktionen. Wir nehmen nochmals die Schleife von oben und wenden diese Auf den Datensatz von Katrin Oesch an: for (i in 1:(ncol(df_KO)-1)) { print(mean(df_KO[,i])) } Was wäre wenn wir diesen Prozess nun auf beliebige Datensätze anwenden möchten, wie etwa die vier Teildatensätz aus Aufgabe 4? Hierfür können wir eine eigene Funktion programmieren: NameEigeneFunktion &lt;- function(argumente){ anweisungen(mit argumenten); weitere anweisung(mit argumenten) } Im sogenannten Funktionskopf innerhalb der runden Klammern auf function folgend werden die formalen Argumente benannt und durch Kommas voneinander getrennt. Damit wird festgelegt, welche Eingabeinformationen die Funktion benötigt. [] Alle im Funktionskopf enthaltenen Argumente müssen im Funktionsrumpf, der in geschweiften Klammern {} folgt, als Objekte definiert werden. Dabei können Argumente selbst andernorts definierte Funktionen sein []. Der Funktionsrumpf besteht also aus einer Reihe von Befehlen sowie gegebenenfalls durch # gekennzeichnete Kommentare (Manderscheid 2017, 240f). Hier nun als ausformulierte Funktion: mean_df &lt;- function(df, nr) { df &lt;- df[,-c(nr)]; for (i in 1:ncol(df)) { print(mean(df[,i])) } } #für Teildatensatz 1 mean_df(TD1_KO, 5) #für Teildatensatz 4 mean_df(TD4_KO, 5)   6. Berechnen Sie für eine Variable und bei einer der vier Möglichkeiten aus Aufgabe 3 den Mittelwert, nun allerdings in einem Schritt (das heisst ohne zuerst einen Teildatensatz zu erstellen). Ein Datensatz und Beispiel von Julien Lattmann: #Datensatz Alter_LJ &lt;- round(runif(100, 18, 30), 0) Dauer_Ausbildung &lt;- round(runif(100, 9, 20), 0) Einstiegsgehalt &lt;- round(rnorm(100, 6000, 1800), 0) Zufriedenheit &lt;- round(runif(100, 1, 10), 0) Branche &lt;- rep(c(&quot;Finanz-/Versicherungswesen&quot;, &quot;Information/Kommunikation&quot;, &quot;Gesundheits-/Sozialwesen&quot;, &quot;Erziehung/Unterricht&quot;, &quot;Dienstleistungsbereich&quot;), 20) df_LJ &lt;- data.frame(Alter_LJ, Dauer_Ausbildung, Einstiegsgehalt, Zufriedenheit, Branche) #Variante 1 mean(df_LJ[df_LJ$Einstiegsgehalt &gt;= 6000 &amp; df_LJ$Dauer_Ausbildung &gt;= 14,&quot;Einstiegsgehalt&quot;]) ## [1] 7424.067 #Variante 2 mean(df_LJ$Einstiegsgehalt[df_LJ$Einstiegsgehalt &gt;= 6000 &amp; df_LJ$Dauer_Ausbildung &gt;= 14]) ## [1] 7424.067 References "],["wochenplan-05-1.html", "6 Wochenplan 05 6.1 Lernziele 6.2 Aufgaben", " 6 Wochenplan 05 Vorbereitung von der 06. auf die 07.Einheit. 6.1 Lernziele Über die vergangenen Wochen haben wir zahlreiche grundlegende Aspekte der Arbeit mit R kennengelernt. Als Vorbereitung im Rahmen des Wochenplans 06 sollen Sie diese Inhalte noch einmal Revue passieren lassen. Im Rahmen dieser Repetition werden weiter zwei neue Dinge vermittelt werden: Auf der einen Seite erfolgt die Schulung aktiver Rezeptionsfertigkeiten (sprich: R-Code lesen und verstehen lernen). Auch dies ist eine wichtige Arbeitstechnik in R. Auf der anderen Seite sollen Sie mit dem rezipierten Code das Prinzip der Inferenzstatistik (und der Stichprobenverteilung sowie des Standardfehlers) in R veranschaulicht bekommen. Konkret lassen sich folgende Seminarziele festhalten: Sie können von einer anderen Person geschriebenen R-Code entziffern und mit Kommentaren versehen. Sie entwickeln dabei ein Gefühl für unterschiedliche Arten, Code lesbar zu gestalten. Sie wissen, wie selbstgeschriebene Funktionen in R aussehen und können diese Schritt für Schritt interpretieren. Sie entwickeln Ihr Verständnis davon weiter, wie in R Grafiken genutzt und angepasst werden, um statistische Inhalte zu visualisieren. Sie nutzen R um über Konzepte der Inferenzstatistik (wie den Standardfehler) nachzudenken. 6.2 Aufgaben Öffnen Sie die Datei standardfehler.R in RStudio (auf OLAT verfügbar). Gehen Sie den Code Zeile für Zeile durch, zuerst ohne diesen auszführen. Versuchen Sie dabei im Detail zu verstehen, was hier vor sich geht. Halten Sie Ihre Einsichten als Kommentare fest. Auch allfällige Fragen und Unklarheiten können Sie einfach als Kommentare notieren. Fügen Sie anschliessend die von Ihnen gesammelten Fragen und die dazugehörigen Codezeilen in ein Markdown-Dokument ein. Die Codezeilen sollen als R Chunk im Markdown aufgeführt sein, aber mit der Ergänzung eval = FALSE versehen. Im Fliesstext des Markdowns können Sie Ihre Kommentare und Fragen erläutern. Führen Sie den Code Schritt für Schritt aus (und löschen Sie die Kommentare von Unklarhheiten, die Ihnen nach der Ausführung des Codes einleuchten). Konzentrieren Sie anschliessend nochmals auf den letzten Punkt (# *Gemeinsame Darstellung*...). Was hat dieser Codeabschnitt mit dem Konzept des Standardfehlers / des Stichprobenfehlers zu tun? Spielen Sie ein wenig mit den verschiedenen Parametern. Welche Zusammenhänge, die für den Standardfehler wesentlich sind, lassen sich erkennen? Sammeln Sie Punkte, die Ihnen aus den bisherigen Seminareinheiten unklar geblieben sind. Welche Aspekte würden Sie gerne noch einmal wiederholen/erläutert bekommen? Sammeln Sie diese Aspekte ebenfalls im Markdown auf dieselbe Art und Weise wie bei Aufgabe 2.   Generieren Sie ein PDF aus dem Markdown, in welchem Sie allfällige Fragen sowie Unklarheiten und die dazugehörigen Codechunks aus Aufgabe 2 und 4 gesammelt haben. Beschriften Sie Ihr Dokument mit FL06_NameVorname.pdf und geben das Dokument via OLAT. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
